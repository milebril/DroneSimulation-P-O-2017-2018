package autopilotModule;

import java.util.HashMap;

import org.lwjgl.util.vector.Matrix4f;
import org.lwjgl.util.vector.Vector3f;

import autopilot.algorithmHandler.AutopilotAlain;
import autopilot.interfaces.Autopilot;
import autopilot.interfaces.AutopilotConfig;
import autopilot.interfaces.AutopilotFactory;
import autopilot.interfaces.AutopilotInputs;
import autopilot.interfaces.AutopilotModule;
import autopilot.interfaces.AutopilotOutputs;
import entities.Drone;
import models.Airport;
import models.RawModel;
import models.TexturedModel;
import physicsEngine.PhysicsEngine;
import physicsEngine.approximationMethods.EulerPrediction;
import renderEngine.Loader;
import renderEngine.OBJLoader;
import textures.ModelTexture;

public class Module implements AutopilotModule{
	
	private static final float STEP_TIME = 0.001f;
	private static Loader loader;
	
	private float length;
	private float width;
	
	private HashMap<Integer,Drone> drones = new HashMap<Integer, Drone>();
	private HashMap<Integer,Airport> airports = new HashMap<Integer, Airport>();
	private HashMap<Integer,AutopilotAlain> autopilots = new HashMap<Integer, AutopilotAlain>();
	
	
	public Module() {
	};
	

	@Override
	public void defineAirportParams(float length, float width) {
		this.length = length;
		this.width = width;
		
	}

	@Override
	public void defineAirport(float centerX, float centerZ, float centerToRunway0X, float centerToRunway0Z) {
		// (centerToRunway0X, centerToRunway0Z) constitutes a unit vector pointing from the center of the airport towards runway 0
		
	}

	//TODO: moeten we drones bijhouden hier en dezelfde lijst int testbed? of wa moete we hier eigenlijk juist doen???
	@Override
	public void defineDrone(int airport, int gate, int pointingToRunway, AutopilotConfig config) {
		// airport and gate define the drone's initial location, pointingToRunway its initial orientation. The first drone that is defined is drone 0, etc.
		
		/* INITIALIZE AUTOPILOT */
		Autopilot autopilot = AutopilotFactory.createAutopilot();
		autopilots.put(autopilots.size(), (AutopilotAlain) autopilot);
		
		//autopilot.simulationStarted(config, autopilot.getAutoPilotInputs()); //TODO gewoon fixen
		
	}

	@Override
	public void startTimeHasPassed(int drone, AutopilotInputs inputs) {
		// Allows the autopilots for all drones to run in parallel if desired. Called with drone = 0 through N - 1, in that order, if N drones have been defined.
		autopilots.get(drone).timePassed(inputs);
	}

	@Override
	public AutopilotOutputs completeTimeHasPassed(int drone) {
		// Called with drone = 0 through N - 1, in that order, if N drones have been defined.
		return autopilots.get(drone);
	}

	@Override
	public void deliverPackage(int fromAirport, int fromGate, int toAirport, int toGate) {
		// Informs the autopilot module of a new package delivery request generated by the testbed.
		
	}

	@Override
	public void simulationEnded() {
		
		
	}

}
